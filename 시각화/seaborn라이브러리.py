# -*- coding: utf-8 -*-
"""SeaBorn라이브러리.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c5Ui9bzra8WubayKYRL1c2TWJU5WmTTR
"""

import seaborn as sns

titanic = sns.load_dataset('titanic')
titanic.head()

titanic.info()

titanic.isna().mean()

# 회귀 : 예측 현재의 값을 가지고 미래를 예측... 가장 기본 방정식... 1창 방정식
# 회귀선이 있는 산점도
import matplotlib.pyplot as plt
sns.set_style('darkgrid')
fig = plt.figure(figsize = (15,5))
ax1 = fig.add_subplot(1,2,1)
ax2 = fig.add_subplot(1,2,2)
sns.regplot(data = titanic, x = 'age', y='fare', ax = ax1)
sns.regplot(data = titanic, x = 'age', y='fare', ax = ax2, fit_reg=False)
plt.show()

# 히스토그램/ 밀도 그래프
fig = plt.figure(figsize=(15,5))
ax1 = fig.add_subplot(1,2,1)
ax2 = fig.add_subplot(1,2,2)

# 기본값
sns.histplot(titanic['fare'], ax=ax1)
sns.histplot(titanic['fare'], kde=True, ax=ax2)
plt.show()

# 히트맵
titanic.head()

table = titanic.pivot_table(index = ['sex'], columns=['class'], aggfunc='size')
table

sns.heatmap(table ,
            annot = True, fmt='d',
            cmap = 'YlGnBu',  # 컬러 맵
            linewidth = .5,   # 구분 선
            cbar = False  # 컬러 바 표시 여부
            )
plt.show()

# 상관관계 htimap
plt.figure(figsize=(10,5))
sns.heatmap(titanic.corr() ,
            annot = True, fmt='.1f',
            cmap = 'YlGnBu',  # 컬러 맵
            linewidth = .5,   # 구분 선
            # cbar = False  # 컬러 바 표시 여부
            )
plt.show()

# 범주형 데이터  stripplot(), swarmplot() - 데이터의 분산까지 고려
# sns style  : darkgrid, whitegrid, dart, white, ticks
sns.set_style('whitegrid')
fig = plt.figure(figsize=(15,5))
ax1 = fig.add_subplot(1,2,1)
ax2 = fig.add_subplot(1,2,2)

sns.stripplot(data= titanic,
              x='class',
              y='age',
              ax=ax1
              )

sns.swarmplot(data= titanic,
              x='class',
              y='age',
              ax=ax2
              )
plt.show()

# 막대 그래프
fig = plt.figure(figsize=(15,5))
ax1 = fig.add_subplot(1,3,1)
ax2 = fig.add_subplot(1,3,2)
ax3 = fig.add_subplot(1,3,3)

sns.barplot(data=titanic, x='sex', y='pclass', ax = ax1)
sns.barplot(data=titanic, x='sex', y='pclass', hue='survived', ax = ax2)
sns.barplot(data=titanic, x='sex', y='pclass', hue='survived', dodge=False, ax = ax3)
plt.show()

sns.countplot(data = titanic, x='pclass' ,hue='sex', dodge=False)
plt.show()

# seaborn boxplot
fig = plt.figure(figsize=(15,10))
ax1 = fig.add_subplot(2,2,1)
ax2 = fig.add_subplot(2,2,2)
ax3 = fig.add_subplot(2,2,3)
ax4 = fig.add_subplot(2,2,4)

sns.boxplot(data=titanic,x='alive',y='age', ax=ax1)
sns.boxplot(data=titanic,x='alive',y='age', hue='sex', ax=ax2)
sns.violinplot(data=titanic,x='alive',y='age', ax=ax3)
sns.violinplot(data=titanic,x='alive',y='age', hue='sex', ax=ax4)
plt.show()

# 조인트 그래프
# 산점도를 기본으로 표기하고 x-y축에 각 변수에 대한 히스토그램을 동시에 보여준다.
# 두 변수간의 관계와 데이터가 분산되어 있는 정도를 파악하기 용이함
# 산점도, 추가 회귀선, 육각 산점도, 커널 밀집그래프 
sns.set_style('whitegrid')

j1=sns.jointplot(data=titanic, x='fare',y='age')
j2=sns.jointplot(data=titanic, x='fare',y='age', kind='reg')
j3=sns.jointplot(data=titanic, x='fare',y='age', kind='hex')
j4=sns.jointplot(data=titanic, x='fare',y='age', kind='kde')

j1.fig.suptitle('titanic fare - scatter', size = 15)
j2.fig.suptitle('titanic fare - reg', size = 15)
j3.fig.suptitle('titanic fare - hex', size = 15)
j4.fig.suptitle('titanic fare - kde', size = 15)

# 조건을 적용해서 화면을 그리드로 분할
# 조건에 따라 그리드를 나눔
g = sns.FacetGrid(data=titanic,col='who',row='survived')
g = g.map(plt.hist, 'age')

# 이변수 데이터 분포
titanic_pair =  titanic[['age','pclass','fare']]
g = sns.pairplot(titanic_pair)

# 확인작업 - 앞에서 타이타닉에 적용했던 시각화를 아이리스 데이터에 적용하기
sns.load_dataset('iris')